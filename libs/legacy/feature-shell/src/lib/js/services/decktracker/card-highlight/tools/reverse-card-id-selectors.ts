/**
 * AUTO-GENERATED FILE - DO NOT EDIT MANUALLY
 * Generated by build-reverse-mappings.ts
 * Run: npx tsx build-reverse-mappings.ts to update
 */

import { CardIds } from '@firestone-hs/reference-data';
import { DeckCard } from '@firestone/game-state';
import { CardsFacadeService, HighlightSide } from '@firestone/shared/framework/core';
import { Selector } from '../cards-highlight-common.service';
import { and, or, side, inDeck, inHand, cardIs } from '../selectors';

export const reverseCardIdSelector = (
	cardId: string,
	card: DeckCard | undefined,
	inputSide: HighlightSide,
	allCards: CardsFacadeService,
): Selector => {
	const refCard = allCards.getCard(cardId);
	if (!refCard) return null;

	// Race-based reverse synergies
	if (refCard.races?.length) {
		if (refCard.races.map(r => r.toUpperCase()).includes('BEAST')) {
			return and(side(inputSide), or(inDeck, inHand), cardIs(
				CardIds.AbsorbentParasite,
			CardIds.AddledGrizzly_WON_009,
			CardIds.AzsharanSaber_SunkenSaberToken,
			CardIds.Banjosaur,
			CardIds.BigDreams,
			CardIds.BunnyStomper_WW_435,
			CardIds.ButchTavernBrawl,
			CardIds.CallPet_GVG_017,
			CardIds.CastleKennels_REV_790,
			CardIds.CattleRustler_WW_351,
			CardIds.CowerInFear_TLC_823,
			CardIds.Dinositter_TLC_822,
			CardIds.ExoticHoundmaster_EDR_226,
			CardIds.FaithfulCompanions,
			CardIds.FangboundDruid,
			CardIds.Goldrinn_EDR_480,
			CardIds.HarpoonGun,
			CardIds.HemetFoamMarksman_TOY_355,
			CardIds.HerbivoreAssistant_DINO_419,
			CardIds.JungleGym_TOY_359,
			CardIds.KathrenaWinterwisp,
			CardIds.KingOfBeasts_WON_162,
			CardIds.KnightOfTheWild_WON_003,
			CardIds.LivingSeedRank1_LivingSeedRank3Token,
			CardIds.Malorne_WON_011,
			CardIds.MenagerieWarden_WON_305,
			CardIds.MessengerBuzzard_WW_807,
			CardIds.MysteryEgg_MysteryEggToken_TOY_351t,
			CardIds.Oondasta,
			CardIds.PaintedCanvasaur_TOY_350,
			CardIds.PeacefulPiper,
			CardIds.PeacefulPiper_FriendlyFace,
			CardIds.PossessedAnimancer_DINO_131,
			CardIds.PredatoryInstincts,
			CardIds.RamkahenWildtamer,
			CardIds.RoostingGargoyle_CORE_REV_351,
			CardIds.ScavengersIngenuity,
			CardIds.ScrapShot,
			CardIds.SelectiveBreederCore,
			CardIds.Serpentbloom,
			CardIds.Shadehound,
			CardIds.ShandoWildclaw_Transfiguration,
			CardIds.StarvingTavernBrawl,
			CardIds.StormpikeBattleRam,
			CardIds.SupremeDinomancy_TLC_828,
			CardIds.TavishStormpike_BAR_038,
			CardIds.TendingDragonkin_FIR_960,
			CardIds.TheCurator_CORE_KAR_061,
			CardIds.ThornmantleMusician,
			CardIds.Thunderbringer_WW_440,
			CardIds.VirmenSensei_WON_300,
			CardIds.WarsongWrangler,
			CardIds.WingCommanderIchman_AV_336,
			CardIds.WitchingHour
			));
		}
		if (refCard.races.map(r => r.toUpperCase()).includes('UNDEAD')) {
			return and(side(inputSide), or(inDeck, inHand), cardIs(
				CardIds.AcolyteOfDeath_CORE_RLK_121,
			CardIds.AmateurPuppeteer_AmateurPuppeteerToken_TOY_828t,
			CardIds.AmorphousSlime,
			CardIds.ArmsDealer_RLK_824,
			CardIds.Banshee_RLK_957,
			CardIds.BoneFlinger,
			CardIds.Bonecaller,
			CardIds.DeadAir,
			CardIds.DrakkariEmbalmer_RLK_119,
			CardIds.ElderNadox,
			CardIds.GluthSicleTavernBrawl,
			CardIds.GluthTavernBrawl_PVPDR_Sai_T1,
			CardIds.GraveDigging,
			CardIds.Invincible,
			CardIds.LesserSpinelSpellstone_GreaterSpinelSpellstoneToken_TOY_825t2,
			CardIds.NecroticMortician_CORE_RLK_116,
			CardIds.NerubianVizier,
			CardIds.NoxiousInfiltrator,
			CardIds.PoisonBreath_CORE_EDR_002,
			CardIds.RottingNecromancer,
			CardIds.ShadowWordUndeath,
			CardIds.SicklyGrimewalker_YOG_512,
			CardIds.SinisterSoulcage_YOG_513,
			CardIds.SkeletalSidekickCore_RLK_958,
			CardIds.SoulburnerVaria_YOG_520,
			CardIds.TwistedTether,
			CardIds.UndyingAllies,
			CardIds.UnlivingChampion,
			CardIds.Wither
			));
		}
		if (refCard.races.map(r => r.toUpperCase()).includes('PIRATE')) {
			return and(side(inputSide), or(inDeck, inHand), cardIs(
				CardIds.AdrenalineFiend_VAC_927,
			CardIds.Ancharrr,
			CardIds.BeckoningBicornTavernBrawl,
			CardIds.CannonBarrage,
			CardIds.CaptainsParrotVanilla,
			CardIds.CutlassCourier,
			CardIds.HarborScamp,
			CardIds.HozenRoughhouser_VAC_938,
			CardIds.PatchesThePirate_CFM_637,
			CardIds.PatchesThePirate_LockedAndLoaded_THD_025p,
			CardIds.PirateAdmiralHooktusk,
			CardIds.SailboatCaptain_VAC_937,
			CardIds.ShadyDealer,
			CardIds.SharkPuncher_WON_138,
			CardIds.ShipsCannon,
			CardIds.ShoplifterGoldbeard_TOY_511,
			CardIds.Swordfish,
			CardIds.TreasureDistributor_TOY_518
			));
		}
		if (refCard.races.map(r => r.toUpperCase()).includes('DEMON')) {
			return and(side(inputSide), or(inDeck, inHand), cardIs(
				CardIds.AllShallServeTavernBrawl,
			CardIds.BlackHole_GDB_126,
			CardIds.BloodreaverGuldan_ICC_831,
			CardIds.CariaFelsoul,
			CardIds.CraneGame_TOY_884,
			CardIds.Demonfuse_DarkFusionEnchantment,
			CardIds.DirgeOfDespair,
			CardIds.Felosophy,
			CardIds.GameMasterNemsy_TOY_524,
			CardIds.InfernalStratagem_GDB_122,
			CardIds.KanrethadEbonlocke_KanrethadPrimeToken,
			CardIds.Malganis_GVG_021,
			CardIds.PitCommander,
			CardIds.RagingFelscreamer_BT_416,
			CardIds.SenseDemonsVanilla_VAN_EX1_317,
			CardIds.SigilOfReckoning,
			CardIds.TabletopRoleplayer_TOY_915,
			CardIds.UmpiresGrasp_TOY_641,
			CardIds.VoidcallerCore
			));
		}
		if (refCard.races.map(r => r.toUpperCase()).includes('DRAGON')) {
			return and(side(inputSide), or(inDeck, inHand), cardIs(
				CardIds.AmberWhelp,
			CardIds.BlackwingCorruptor_WON_329,
			CardIds.BreathOfDreams,
			CardIds.BroodKeeper_EDR_457,
			CardIds.CandleBreath,
			CardIds.Chillmaw_CORE_AT_123,
			CardIds.CloudSerpent_TLC_888,
			CardIds.ClutchOfCorruption_EDR_454,
			CardIds.CollectorsIreTavernBrawlToken,
			CardIds.DaringDrake,
			CardIds.Darkrider_EDR_456,
			CardIds.DesertNestmatron_WW_826,
			CardIds.DraconicDreamTavernBrawl,
			CardIds.DragonAffinityTavernBrawl,
			CardIds.DragonBreeder,
			CardIds.DragonConsort,
			CardIds.DragonGolem_WW_822,
			CardIds.DragonbloodTavernBrawl,
			CardIds.DragonboneRitualTavernBrawl,
			CardIds.Dragoncaster,
			CardIds.DrakonidOperativeCore,
			CardIds.DrocomurchanicasTavernBrawlToken,
			CardIds.FlyOffTheShelves_TOY_714,
			CardIds.FrizzKindleroost,
			CardIds.FutureEmissary_WON_140,
			CardIds.GiftwrappedWhelp_TOY_386,
			CardIds.HeraldOfFlame_TRLA_176,
			CardIds.HornOfWrathion,
			CardIds.Kazakusan_ONY_005,
			CardIds.MalygosAspectOfMagic,
			CardIds.NaralexHeraldOfTheFlights_EDR_844,
			CardIds.NetherBreath_DRG_205,
			CardIds.OnyxianWarder,
			CardIds.PetalPeddler_EDR_889,
			CardIds.RedscaleDragontamer_CORE_DMF_194,
			CardIds.ScaleReplica_TOY_387,
			CardIds.Scalerider,
			CardIds.Scaleworm,
			CardIds.Skyfin,
			CardIds.Soridormi_WON_146,
			CardIds.SpinetailDrake_WW_820,
			CardIds.SplishSplashWhelp_WW_819,
			CardIds.Stormhammer,
			CardIds.SuccumbToMadness_EDR_455,
			CardIds.TakeToTheSkies_WW_816,
			CardIds.TastyFlyfish,
			CardIds.Timewarden,
			CardIds.TimewinderZarimi_TOY_385,
			CardIds.TormentedDreadwing_EDR_572,
			CardIds.TwilightGuardian,
			CardIds.WingCommander
			));
		}
		if (refCard.races.map(r => r.toUpperCase()).includes('ELEMENTAL')) {
			return and(side(inputSide), or(inDeck, inHand), cardIs(
				CardIds.AnimatedAvalanche,
			CardIds.AquaArchivist,
			CardIds.AridStormer,
			CardIds.AzeriteGiant_WW_025,
			CardIds.Blazecaller,
			CardIds.BralmaSearstone_TLC_228,
			CardIds.DangBlastedElemental_WW_397,
			CardIds.ElementalEvocation,
			CardIds.ElementaryReaction,
			CardIds.ErodedSediment_WW_428,
			CardIds.FireBreath_DINO_406,
			CardIds.FirePlumeHarbinger,
			CardIds.FlameRevenant,
			CardIds.FrostLichJaina_CORE_ICC_833,
			CardIds.FrostfinChomper,
			CardIds.GraniteForgeborn,
			CardIds.Gyreworm,
			CardIds.KalimosPrimalLord_Core_UNG_211,
			CardIds.KindlingElemental,
			CardIds.Lamplighter_VAC_442,
			CardIds.LilypadLurker,
			CardIds.LivingPrairie_WW_024,
			CardIds.MesaduneTheFractured_WW_429,
			CardIds.MinecartCruiser_WW_326,
			CardIds.OverflowSurger_WW_424,
			CardIds.Sandbinder,
			CardIds.ShaleSpider_DEEP_034,
			CardIds.SkarrTheCatastrophe_WW_026,
			CardIds.SolarFlare_GDB_305,
			CardIds.SpontaneousCombustion_GDB_456,
			CardIds.SteamSurger,
			CardIds.StoneSentinel,
			CardIds.TaintedRemnant_YOG_519,
			CardIds.Therazane_DEEP_036,
			CardIds.UnchainedGladiator,
			CardIds.WailingVapor_CORE_WC_042,
			CardIds.WindsweptPageturner_TLC_220
			));
		}
		if (refCard.races.map(r => r.toUpperCase()).includes('MURLOC')) {
			return and(side(inputSide), or(inDeck, inHand), cardIs(
				CardIds.AzsharanScavenger_SunkenScavengerToken,
			CardIds.Braingill_GDB_878,
			CardIds.CookiesLadleTavernBrawl,
			CardIds.DiveTheGolakkaDepths_TLC_426,
			CardIds.FinjaTheFlyingStar_CORE_CFM_344,
			CardIds.FiremancerFlurgl,
			CardIds.GorlocRavager,
			CardIds.HotSpringGlider_TLC_428,
			CardIds.IceFishing_ICC_089,
			CardIds.ItsRainingFin,
			CardIds.LushwaterScout,
			CardIds.SirFinleyMrrgglton_ScalesOfJustice_THD_044p,
			CardIds.TidelostBurrower,
			CardIds.TinyfinsCaravan,
			CardIds.UnderbellyAngler
			));
		}
		if (refCard.races.map(r => r.toUpperCase()).includes('NAGA')) {
			return and(side(inputSide), or(inDeck, inHand), cardIs(
				CardIds.BarbedNets,
			CardIds.CoilCastingTavernBrawl,
			CardIds.ConchsCall,
			CardIds.NagasPride,
			CardIds.OasisOutlaws_WW_404,
			CardIds.Predation,
			CardIds.SeaweedStrike,
			CardIds.SerpentWig_TSC_215
			));
		}
		if (refCard.races.map(r => r.toUpperCase()).includes('MECH')) {
			return and(side(inputSide), or(inDeck, inHand), cardIs(
				CardIds.Bubblebot_TSC_059,
			CardIds.ClickClocker,
			CardIds.ClockworkKnight,
			CardIds.DrBoomMadGenius,
			CardIds.DrBoom_BoomBarrage_THD_034p,
			CardIds.DynOMaticCore,
			CardIds.FrequencyOscillator,
			CardIds.GaiaTheTechtonic_TSC_029,
			CardIds.GoboglideTech,
			CardIds.IniStormcoil_TSC_649,
			CardIds.InventorsAura,
			CardIds.KangorsEndlessArmy,
			CardIds.MechaShark_TSC_054,
			CardIds.MimironTheMastermind,
			CardIds.PitStop,
			CardIds.RadarDetector_TSC_079,
			CardIds.SeafloorGateway_TSC_055,
			CardIds.SeascoutOperator_TSC_646,
			CardIds.SecurityAutomaton_TSC_928,
			CardIds.SootSpewer_WON_033,
			CardIds.TimelineAccelerator_WON_139,
			CardIds.TinyWorldbreaker_YOG_527,
			CardIds.TramOperator,
			CardIds.TrenchSurveyor_TSC_642,
			CardIds.Ursatron,
			CardIds.WreckemAndDeckem_TOY_603
			));
		}
		if (refCard.races.map(r => r.toUpperCase()).includes('TOTEM')) {
			return and(side(inputSide), or(inDeck, inHand), cardIs(
				CardIds.DraeneiTotemcarver_CORE_AT_047,
			CardIds.Gigantotem,
			CardIds.SplittingAxe,
			CardIds.TheStonewright,
			CardIds.ThingFromBelowCore,
			CardIds.TotemicSurge
			));
		}
	}

	// Spell school reverse synergies
	if (refCard.spellSchool && refCard.type?.toUpperCase() === 'SPELL') {
		if (refCard.spellSchool?.toUpperCase() === 'ARCANE') {
			return and(side(inputSide), or(inDeck, inHand), cardIs(
				CardIds.ArcaneFluxTavernBrawl,
			CardIds.ArcaniteCrystalTavernBrawl,
			CardIds.HalduronBrightwing,
			CardIds.MagistersApprentice,
			CardIds.SilvermoonFarstrider_RLK_826,
			CardIds.StarlightReactor_GDB_108,
			CardIds.UnstableMagicTavernBrawl,
			CardIds.Vexallus
			));
		}
		if (refCard.spellSchool?.toUpperCase() === 'FROST') {
			return and(side(inputSide), or(inDeck, inHand), cardIs(
				CardIds.BitterColdTavernBrawl,
			CardIds.GlacialDownpourTavernBrawl,
			CardIds.HarbingerOfWinterCore_RLK_511,
			CardIds.HeraldOfLokholar,
			CardIds.IceRevenant,
			CardIds.LadyDeathwhisper_RLK_713,
			CardIds.RambunctiousStuffy_TOY_821,
			CardIds.Rimetongue,
			CardIds.WatercolorArtist_TOY_376
			));
		}
		if (refCard.spellSchool?.toUpperCase() === 'HOLY') {
			return and(side(inputSide), or(inDeck, inHand), cardIs(
				CardIds.CarielRoame_BAR_902,
			CardIds.DivineIlluminationTavernBrawl,
			CardIds.FlickeringLightbot_FlickeringLightbotToken_MIS_918t,
			CardIds.GuardianLightTavernBrawl,
			CardIds.HeraldOfLight,
			CardIds.HiHoSilverwing_WW_344,
			CardIds.HolyCowboy_WW_335,
			CardIds.HolyGlowsticks_MIS_709,
			CardIds.InvigoratingLightTavernBrawl,
			CardIds.KnightOfAnointment,
			CardIds.KureTheLightBeyond_GDB_442,
			CardIds.ReachEquilibrium_CleanseTheShadowToken_TLC_817t,
			CardIds.ShimmeringSunfish,
			CardIds.StarlightGroove,
			CardIds.TheGardensGrace,
			CardIds.VeteranWarmedic
			));
		}
		if (refCard.spellSchool?.toUpperCase() === 'NATURE') {
			return and(side(inputSide), or(inDeck, inHand), cardIs(
				CardIds.ChampionOfStorms,
			CardIds.CrashOfThunder,
			CardIds.DeviateDreadfang,
			CardIds.GroveShaper_EDR_271,
			CardIds.GuffRunetotem_BAR_720,
			CardIds.HeraldOfNature,
			CardIds.IronRootsTavernBrawl,
			CardIds.LadyAnacondra_WC_006,
			CardIds.MendingPoolsTavernBrawl,
			CardIds.NaturalForceTavernBrawl,
			CardIds.SpreadingSaplingsTavernBrawl,
			CardIds.ToadOfTheWilds,
			CardIds.TopiorTheShrubbagazzor,
			CardIds.WidowbloomSeedsman
			));
		}
		if (refCard.spellSchool?.toUpperCase() === 'FEL') {
			return and(side(inputSide), or(inDeck, inHand), cardIs(
				CardIds.CorruptedFelstoneTavernBrawl,
			CardIds.FelfireBlaze_FIR_904,
			CardIds.Felgorger_SW_043,
			CardIds.FossilFanatic,
			CardIds.GraveDefiler,
			CardIds.HeraldOfChaos,
			CardIds.IllidanStormrage_FelInside_THD_004p,
			CardIds.ImpCredibleTrousersTavernBrawl,
			CardIds.PopgarThePutrid_WW_091,
			CardIds.Scorchreaver_FIR_952,
			CardIds.WitherTheWeakTavernBrawl
			));
		}
		if (refCard.spellSchool?.toUpperCase() === 'SHADOW') {
			return and(side(inputSide), or(inDeck, inHand), cardIs(
				CardIds.CrystalsmithCultist,
			CardIds.Darkbomb_WON_095,
			CardIds.EerieStoneTavernBrawl,
			CardIds.HeraldOfShadows,
			CardIds.KaraTheDarkStar_GDB_127,
			CardIds.LadyDarkvein_CORE_REV_373,
			CardIds.ReachEquilibrium_CorruptTheLightToken_TLC_817t2,
			CardIds.Shadowborn,
			CardIds.ShadowclothNeedle,
			CardIds.SketchArtist_TOY_916,
			CardIds.StaffOfPainTavernBrawl,
			CardIds.TwilightDeceptor
			));
		}
		if (refCard.spellSchool?.toUpperCase() === 'FIRE') {
			return and(side(inputSide), or(inDeck, inHand), cardIs(
				CardIds.FirekeepersIdolTavernBrawl,
			CardIds.FlameWavesTavernBrawl,
			CardIds.FlamesOfTheKirinTorTavernBrawl,
			CardIds.HotStreak,
			CardIds.InfernoHerald_FIR_913,
			CardIds.KindlingFlameTavernBrawl,
			CardIds.LivingFlame_FIR_929,
			CardIds.MechanizedMagma_TLC_224,
			CardIds.ScorchingWinds_FIR_910,
			CardIds.SunfuryChampion,
			CardIds.Thoribelore,
			CardIds.VolcanicThrasher_TLC_223
			));
		}
	}

	// Card type reverse synergies
	if (refCard.type?.toUpperCase() === 'WEAPON') {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.AbyssalBassist,
			CardIds.AirGuitarist,
			CardIds.AxeBerserker,
			CardIds.BlackscaleBrute,
			CardIds.CagematchCustodian,
			CardIds.CorsairCache,
			CardIds.FogsailFreebooterCore,
			CardIds.ForgedInFlame,
			CardIds.GrimtotemBuzzkill,
			CardIds.GrommashsArmguardsTavernBrawl,
			CardIds.InstrumentSmasher,
			CardIds.InstrumentTech,
			CardIds.Khazgoroth_TitanforgeToken,
			CardIds.LadyAshvane_Story_11_LadyAshvane,
			CardIds.ManAtArms,
			CardIds.PillageTheFallenTavernBrawl,
			CardIds.Plunder,
			CardIds.RatchetPrivateer,
			CardIds.Runeforging_LEG_RLK_715,
			CardIds.SelflessSidekick,
			CardIds.ShadestoneSkulker_DEEP_012,
			CardIds.SharpShipment_WORK_005,
			CardIds.SmallTimeBuccaneer_WON_351,
			CardIds.SouthseaDeckhandVanilla,
			CardIds.SpacePirate_GDB_333,
			CardIds.SwarthySwordshiner_VAC_701,
			CardIds.VulperaToxinblade,
			CardIds.WeaponsExpert
		));
	}
	if (refCard.type?.toUpperCase() === 'SPELL') {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.AdvancedTargetingMonocle,
			CardIds.AncientKrakenbane,
			CardIds.AnimatedMoonwell_EDR_254,
			CardIds.ArcaneArtificerCore,
			CardIds.ArchmageAntonidas_CORE_EX1_559,
			CardIds.ArchmageVargoth,
			CardIds.ArkoniteRevelation_GDB_852,
			CardIds.ArrowSmith,
			CardIds.AudioSplitter,
			CardIds.BabaNaga,
			CardIds.BalindaStonehearth,
			CardIds.BarbaricSorceress,
			CardIds.BenevolentBanker_WW_384,
			CardIds.Bioluminescence,
			CardIds.Bloodbloom,
			CardIds.BookOfSpecters,
			CardIds.BrollBearmantle_EDR_853,
			CardIds.CactusCutter_WW_327,
			CardIds.CardGrader_TOY_054,
			CardIds.CelestialShot_YOG_082,
			CardIds.ChiaDrake_Cultivate_TOY_801a,
			CardIds.ChiaDrake_SeedlingGrowth_TOY_801b,
			CardIds.ClearancePromoter_TOY_390,
			CardIds.ClockworkAssistantTavernBrawl_PVPDR_Toki_T5,
			CardIds.CoilskarCommander,
			CardIds.Colossus_SC_758,
			CardIds.CommanderSivara_TSC_087,
			CardIds.Conductivity_YOG_522,
			CardIds.ConjuredBookkeeper_TLC_226,
			CardIds.ContaminatedLasher_YOG_528,
			CardIds.CosmicKeyboard,
			CardIds.Cosmonaut_GDB_443,
			CardIds.DarkmoonMagician_MIS_303,
			CardIds.Deathchiller_CORE_RLK_083,
			CardIds.DeckOfLunacy,
			CardIds.DeepwaterEvoker,
			CardIds.DevoutPupil,
			CardIds.DoorOfShadows_DoorOfShadowsToken,
			CardIds.DoubleTime,
			CardIds.DozingKelpkeeper,
			CardIds.DragonsFury,
			CardIds.DryscaleDeputy_WW_383,
			CardIds.EnergyShaper,
			CardIds.ExarchHataaru_TheGalaxysLensToken_GDB_136t,
			CardIds.FarseerNobundo_GDB_447,
			CardIds.GlacialAdvance_RLK_512,
			CardIds.GlowflySwarm,
			CardIds.GreenThumbGardener,
			CardIds.HallazealTheAscended_WON_336,
			CardIds.Handmaiden,
			CardIds.HarnessTheElementsTavernBrawl,
			CardIds.HedraTheHeretic_TSC_658,
			CardIds.HighAbbessAlura,
			CardIds.Hullbreaker,
			CardIds.IcebloodTower,
			CardIds.IdolsOfEluneTavernBrawl,
			CardIds.Illuminate,
			CardIds.IncantersFlow,
			CardIds.JotunTheEternal,
			CardIds.JungleJammer,
			CardIds.KhadgarsScryingOrb,
			CardIds.Kindle_ULDA_911,
			CardIds.KingTide_VAC_524,
			CardIds.KolkarPackRunner,
			CardIds.LadyStheno_TSC_218,
			CardIds.LadyVashj_VashjPrimeToken,
			CardIds.LearnDraconic,
			CardIds.LifebindersGrowth,
			CardIds.Lifeguard_VAC_919,
			CardIds.LinaShopManager_TOY_531,
			CardIds.LockAndLoad_WON_023,
			CardIds.LorewalkerCho_CORE_EX1_100,
			CardIds.LoveEverlasting,
			CardIds.MagathaBaneOfMusic,
			CardIds.MagisterDawngrasp_AV_200,
			CardIds.MagisterUnchainedTavernBrawlToken,
			CardIds.MalygosTheSpellweaverCore,
			CardIds.ManaCyclone,
			CardIds.MantleShaper_DEEP_004,
			CardIds.MaroonedArchmage_VAC_435,
			CardIds.MarshlandThresher_TLC_256,
			CardIds.Marshspawn_CORE_BT_115,
			CardIds.MeddlesomeServant_YOG_518,
			CardIds.MistahVistah_VAC_519,
			CardIds.MurkwaterScribe,
			CardIds.Myrmidon,
			CardIds.NagaGiant,
			CardIds.NostalgicInitiate_NostalgicInitiateToken_TOY_340t1,
			CardIds.OopsAllSpellsTavernBrawl,
			CardIds.Owlonius_TOY_807,
			CardIds.PalmReading,
			CardIds.ParchedDesperado_WW_407,
			CardIds.PartyPortalTavernBrawl_PVPDR_SCH_Active08,
			CardIds.Pelagos_REV_781,
			CardIds.PortalmancerSkyla_WORK_063,
			CardIds.PowerWordFortitude,
			CardIds.PreparationVanilla,
			CardIds.PriestessValishj,
			CardIds.PrimordialProtector_BAR_042,
			CardIds.PrisonBreaker_YOG_411,
			CardIds.Pyrotechnician,
			CardIds.QueenAzshara_TSC_641,
			CardIds.Queensguard,
			CardIds.RaidTheSkyTemple,
			CardIds.RajNazjan,
			CardIds.RayllaSandSculptor_VAC_424,
			CardIds.Reforestation_AidOfTheForest_EDR_843a,
			CardIds.RefreshingSpringWater,
			CardIds.RhoninsScryingOrbTavernBrawl,
			CardIds.RimefangSword_LEG_RLK_710,
			CardIds.RimescaleSiren,
			CardIds.RingOfRefreshmentTavernBrawl,
			CardIds.RitualOfTheNewMoon_EDR_461,
			CardIds.RobeOfTheApprenticeTavernBrawl,
			CardIds.RobeOfTheMagi,
			CardIds.RobesOfShrinkingTavernBrawl,
			CardIds.RuleModifier_SpreadOfCorruptionToken_TTN_002t45,
			CardIds.RuneDagger,
			CardIds.SaroniteShambler_YOG_521,
			CardIds.ScrollSavvy,
			CardIds.ShadowOfDemise,
			CardIds.ShadowVisions,
			CardIds.ShatariCloakfield_GDB_103,
			CardIds.SheldrasMoontree,
			CardIds.ShieldBattery_SC_759,
			CardIds.ShirvallahTheTiger,
			CardIds.ShiveringSorceress,
			CardIds.SlitheringDeathscale,
			CardIds.SpectralTrainee,
			CardIds.Spellcoiler,
			CardIds.SpitefulSummoner,
			CardIds.Starscryer,
			CardIds.SunstridersCrownTavernBrawl,
			CardIds.Surfalopod_VAC_443,
			CardIds.SwiftscaleTrickster,
			CardIds.TalentedArcanist,
			CardIds.TangledWrath,
			CardIds.TheFistOfRaDen,
			CardIds.TheStoneOfJordanTavernBrawlToken,
			CardIds.TheUpperHand,
			CardIds.ThriveInTheShadowsCore,
			CardIds.TidePools_VAC_522,
			CardIds.TidepoolPupil_VAC_304,
			CardIds.TortollanPilgrim,
			CardIds.TrolleyProblem_WW_436,
			CardIds.TwinbowTerrorcoil,
			CardIds.Tyrande_EDR_464,
			CardIds.UngoroBrochure_DalaranBrochureToken_WORK_050t,
			CardIds.UrchinSpines,
			CardIds.Ursol_EDR_259,
			CardIds.VelensChosen,
			CardIds.ViciousSlitherspear_CORE_TSC_827,
			CardIds.VoidFlayer,
			CardIds.VolumeUp,
			CardIds.Whirlweaver,
			CardIds.WickedWitchdoctor_WON_083,
			CardIds.WildPyromancerVanilla,
			CardIds.WishOfTheNewMoon_EDR_460,
			CardIds.YoggSaronMasterOfFate,
			CardIds.Zuljin
		));
	}
	if (refCard.type?.toUpperCase() === 'MINION') {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.AegwynnTheGuardian_LEG_CS3_001,
			CardIds.AlarmedSecuritybot_YOG_510,
			CardIds.AllianceBannerman,
			CardIds.AlwaysABiggerJormungar,
			CardIds.AmitusThePeacekeeper,
			CardIds.AmitusThePeacekeeper_ReinforcedToken,
			CardIds.AncestorsCall,
			CardIds.AnimaExtractor_CORE_REV_332,
			CardIds.AnimatedBerserker_ICC_238,
			CardIds.Anubrekhan_RLK_659,
			CardIds.ApexisBlast,
			CardIds.Artanis_SC_754,
			CardIds.Assembly_Assembly,
			CardIds.Aviana_WON_012,
			CardIds.AzsharanGardens_SunkenGardensToken,
			CardIds.BackstageBouncer,
			CardIds.BanelingBarrage_SC_001,
			CardIds.Barnes,
			CardIds.BeanstalkBrute_EDR_230,
			CardIds.Birdwatching_VAC_408,
			CardIds.BlackrockNRoll,
			CardIds.BladeOfTheBurningSun,
			CardIds.Blink_SC_761,
			CardIds.BloodCrusader,
			CardIds.BloodMoonTavernBrawl,
			CardIds.BloodOfGhuun,
			CardIds.BobTheBartender_FindATripleToken_BG31_BOBt4,
			CardIds.Breakdance,
			CardIds.BronzeSignetTavernBrawl,
			CardIds.CapturedFlag,
			CardIds.CarnivorousCube,
			CardIds.CarnivorousCubicle_WORK_042,
			CardIds.CharredChameleon_FIR_908,
			CardIds.ChemicalSpill_TOY_602,
			CardIds.ChorusRiff,
			CardIds.ClawMachine,
			CardIds.CliffDive_VAC_926,
			CardIds.ColiferoTheArtist_TOY_703,
			CardIds.Commencement,
			CardIds.CowardlyGrunt,
			CardIds.CreationProtocol_CreationProtocolToken,
			CardIds.CreepTumor_SC_011,
			CardIds.DealWithADevil,
			CardIds.DeckOfChaos,
			CardIds.DevilsaurMask_DINO_403,
			CardIds.DimensionalRipper,
			CardIds.DisciplinarianGandling,
			CardIds.DiscoMaul,
			CardIds.DivineStar_GDB_460,
			CardIds.DreamboundRaptor_EDR_849,
			CardIds.EchoOfMedivh,
			CardIds.EliseBadlandsSavior_WW_392,
			CardIds.ElixirOfVigorTavernBrawl,
			CardIds.ElvenMinstrelCore,
			CardIds.Embiggen,
			CardIds.Ensmallen_TOY_805,
			CardIds.EternalServitude_ICC_213,
			CardIds.Eureka,
			CardIds.FeldoreiWarband,
			CardIds.Firegill_DINO_404,
			CardIds.FlashSale_TOY_716,
			CardIds.FoodFight_EntréeToken_VAC_533t,
			CardIds.FrontLines_Story_11_FrontLines,
			CardIds.FungalFortunes,
			CardIds.GatherYourParty,
			CardIds.GreedyGainsTavernBrawl,
			CardIds.GrimestreetOutfitterCore,
			CardIds.GrimyGadgeteer,
			CardIds.HabeasCorpses,
			CardIds.HagathasEmbraceTavernBrawl,
			CardIds.Hallucination_SC_757,
			CardIds.HarmonicMetal_DissonantMetalToken,
			CardIds.HatchingCeremony_DINO_405,
			CardIds.HawkstriderRancher,
			CardIds.HealingWave_WON_320,
			CardIds.Hellion_HellbatToken_SC_412t,
			CardIds.HopeOfQuelthalas,
			CardIds.ImpendingCatastrophe,
			CardIds.ImployeeOfTheMonth_WORK_009,
			CardIds.ImprisonedScrapImp,
			CardIds.Infestor_SC_002,
			CardIds.Insight_InsightToken,
			CardIds.InvigoratingSermon,
			CardIds.IxlidFungalLord,
			CardIds.JalTheSharpshot,
			CardIds.JepettoJoybuzz,
			CardIds.JimRaynor_Stimpack_SC_400p,
			CardIds.KabalTalonpriest,
			CardIds.KeeperOfFlame_FIR_928,
			CardIds.KeepersStrength_YOG_509,
			CardIds.LadyInWhite,
			CardIds.Lightspeed_GDB_457,
			CardIds.LivingGarden_EDR_518,
			CardIds.LohTheLivingLegend_TLC_257,
			CardIds.LokenJailerOfYoggSaron,
			CardIds.LongneckEgg_DINO_130,
			CardIds.LorthemarTheron_RLK_593,
			CardIds.Malfunction_MIS_107,
			CardIds.ManufacturingError_TOY_371,
			CardIds.MaskedReveler,
			CardIds.MasterJouster,
			CardIds.MaximaBlastenheimer,
			CardIds.MeatGrinder_RLK_120,
			CardIds.Melomania,
			CardIds.MoatLurker,
			CardIds.MonstrousMosquito_EDR_816,
			CardIds.MoshPit,
			CardIds.MuscleOTron_YOG_525,
			CardIds.MutatingInjection_NAX11_04,
			CardIds.NightmareLordXavius_EDR_856,
			CardIds.OldMilitiaHorn_VeteransMilitiaHornTavernBrawl,
			CardIds.OrbitalHalo_GDB_439,
			CardIds.OrbitalMoon_GDB_475,
			CardIds.OutfitTailor,
			CardIds.OverlordsWhip,
			CardIds.PaintersVirtue_TOY_810,
			CardIds.PantherMask_DINO_432,
			CardIds.PendantOfEarth_DEEP_026,
			CardIds.PhotonCannon_SC_753,
			CardIds.PileOnHeroic,
			CardIds.PowerChordSynchronize,
			CardIds.ProvingGrounds,
			CardIds.Psychopomp,
			CardIds.PuppetmasterDorian_MIS_026,
			CardIds.RaidBossOnyxia_ONY_004,
			CardIds.Ravage_SC_004hp,
			CardIds.Reforestation_Fertilize_EDR_843b,
			CardIds.RiskySkipper,
			CardIds.Roach_SC_012,
			CardIds.RunningWild_RunningWild,
			CardIds.SeafloorSavior_TSC_083,
			CardIds.Seismopod_DINO_421,
			CardIds.Sentry_SC_764,
			CardIds.SesselieOfTheFaeCourt_REV_782,
			CardIds.ShadowEssence_ICC_235,
			CardIds.Shadowcaster,
			CardIds.Shadowcasting101TavernBrawl,
			CardIds.ShadowstepVanilla,
			CardIds.ShroudOfConcealment,
			CardIds.SilvermoonBrochure_WORK_017,
			CardIds.SilvermoonPortal_WON_309,
			CardIds.SmolderingStrength_FIR_914,
			CardIds.SoulrestCeremony_DINO_417,
			CardIds.SowTheSeedsTavernBrawl,
			CardIds.SpawningPool_SC_000,
			CardIds.SpiritOfTheBadlands_MirageToken_WW_337t,
			CardIds.SpiritPeddler_WORK_015,
			CardIds.SpotTheDifference_TOY_374,
			CardIds.SrExcavatorTavernBrawl,
			CardIds.StrengthInNumbers,
			CardIds.SuperchargeTavernBrawl,
			CardIds.SurvivalOfTheFittest,
			CardIds.Switcheroo,
			CardIds.TenGallonHat_WW_811,
			CardIds.TheBoomReaver,
			CardIds.TheBoomship,
			CardIds.TheDarkPortal_BT_302,
			CardIds.TheLichKing_ArmyOfTheFrozenThroneToken,
			CardIds.TogwagglesScheme,
			CardIds.TravelmasterDungar_WORK_043,
			CardIds.UngoroBrochure_WORK_050,
			CardIds.VarianWrynn_AT_072,
			CardIds.ViciousBloodworm_RLK_711,
			CardIds.Viper_SC_018,
			CardIds.VitalitySurge,
			CardIds.WarpGate_SC_751,
			CardIds.WebOfDeception_EDR_523,
			CardIds.YoggInTheBox_TOY_372,
			CardIds.YouthfulBrewmasterVanilla,
			CardIds.YshaarjRageUnbound
		));
	}

	// Compound condition reverse synergies

	return null;
};

/**
 * Reverse mapping summary:
 * Races:
 *   beast: 54 cards want this
 *   undead: 29 cards want this
 *   pirate: 18 cards want this
 *   demon: 19 cards want this
 *   dragon: 51 cards want this
 *   elemental: 37 cards want this
 *   murloc: 15 cards want this
 *   naga: 8 cards want this
 *   mech: 26 cards want this
 *   totem: 6 cards want this
 * Spell Schools:
 *   arcane: 8 cards want this
 *   frost: 9 cards want this
 *   holy: 16 cards want this
 *   nature: 14 cards want this
 *   fel: 11 cards want this
 *   shadow: 12 cards want this
 *   fire: 12 cards want this
 * Card Types:
 *   weapon: 28 cards want this
 *   spell: 160 cards want this
 *   minion: 170 cards want this
 *   location: 1 cards want this
 * Mechanics:
 * Compound Conditions:
 *   mech+deathrattle: 1 cards want this
 *   elemental+legendary: 1 cards want this
 */
/**
 * AUTO-GENERATED FILE - DO NOT EDIT MANUALLY
 * Generated by build-reverse-mappings.ts
 * Run: npx tsx build-reverse-mappings.ts to update
 */

import { CardIds } from '@firestone-hs/reference-data';
import { DeckCard } from '@firestone/game-state';
import { CardsFacadeService, HighlightSide } from '@firestone/shared/framework/core';
import { Selector } from '../cards-highlight-common.service';
import { and, or, side, inDeck, inHand, cardIs } from '../selectors';

export const reverseCardIdSelector = (
	cardId: string,
	card: DeckCard | undefined,
	inputSide: HighlightSide,
	allCards: CardsFacadeService,
): Selector => {
	const refCard = allCards.getCard(cardId);
	if (!refCard) return null;

	// Race-based reverse synergies
	if (refCard.races?.length) {
		if (refCard.races.map(r => r.toUpperCase()).includes('UNDEAD')) {
			return and(side(inputSide), or(inDeck, inHand), cardIs(
				CardIds.AcolyteOfDeath_CORE_RLK_121,
			CardIds.AmateurPuppeteer_AmateurPuppeteerToken_TOY_828t,
			CardIds.ArmsDealer_RLK_824,
			CardIds.Banshee_RLK_957,
			CardIds.BoneFlinger,
			CardIds.Bonecaller,
			CardIds.DeadAir,
			CardIds.DrakkariEmbalmer_RLK_119,
			CardIds.ElderNadox,
			CardIds.FleshBehemoth_RLK_Prologue_RLK_830,
			CardIds.GluthSicleTavernBrawl,
			CardIds.GluthTavernBrawl_PVPDR_Sai_T1,
			CardIds.GraveDigging,
			CardIds.Invincible,
			CardIds.LesserSpinelSpellstone_GreaterSpinelSpellstoneToken_TOY_825t2,
			CardIds.NecroticMortician_CORE_RLK_116,
			CardIds.NerubianVizier,
			CardIds.NoxiousInfiltrator,
			CardIds.PoisonBreath_CORE_EDR_002,
			CardIds.RottingNecromancer,
			CardIds.ShadowWordUndeath,
			CardIds.SicklyGrimewalker_YOG_512,
			CardIds.SkeletalSidekickCore_RLK_958,
			CardIds.SoulburnerVaria_YOG_520,
			CardIds.TwistedTether,
			CardIds.UndyingAllies,
			CardIds.UnlivingChampion,
			CardIds.Wither
			));
		}
		if (refCard.races.map(r => r.toUpperCase()).includes('BEAST')) {
			return and(side(inputSide), or(inDeck, inHand), cardIs(
				CardIds.AddledGrizzly_WON_009,
			CardIds.AzsharanSaber_SunkenSaberToken,
			CardIds.BigDreams,
			CardIds.BunnyStomper_WW_435,
			CardIds.ButchTavernBrawl,
			CardIds.CallPet_GVG_017,
			CardIds.CastleKennels_REV_790,
			CardIds.CattleRustler_WW_351,
			CardIds.CowerInFear_TLC_823,
			CardIds.Dinositter_TLC_822,
			CardIds.ExoticHoundmaster_EDR_226,
			CardIds.FaithfulCompanions,
			CardIds.FangboundDruid,
			CardIds.Goldrinn_EDR_480,
			CardIds.HarpoonGun,
			CardIds.HemetFoamMarksman_TOY_355,
			CardIds.HerbivoreAssistant_DINO_419,
			CardIds.JungleGym_TOY_359,
			CardIds.KathrenaWinterwisp,
			CardIds.KingOfBeasts_WON_162,
			CardIds.KnightOfTheWild_WON_003,
			CardIds.LivingSeedRank1_LivingSeedRank3Token,
			CardIds.Malorne_WON_011,
			CardIds.MenagerieWarden_WON_305,
			CardIds.MessengerBuzzard_WW_807,
			CardIds.MysteryEgg_MysteryEggToken_TOY_351t,
			CardIds.Oondasta,
			CardIds.PaintedCanvasaur_TOY_350,
			CardIds.PeacefulPiper,
			CardIds.PeacefulPiper_FriendlyFace,
			CardIds.PossessedAnimancer_DINO_131,
			CardIds.PredatoryInstincts,
			CardIds.RamkahenWildtamer,
			CardIds.RoostingGargoyle_CORE_REV_351,
			CardIds.ScavengersIngenuity,
			CardIds.ScrapShot,
			CardIds.SelectiveBreederCore,
			CardIds.Serpentbloom,
			CardIds.Shadehound,
			CardIds.ShandoWildclaw_Transfiguration,
			CardIds.StarvingTavernBrawl,
			CardIds.StormpikeBattleRam,
			CardIds.SupremeDinomancy_TLC_828,
			CardIds.TavishStormpike_BAR_038,
			CardIds.TendingDragonkin_FIR_960,
			CardIds.ThornmantleMusician,
			CardIds.Thunderbringer_WW_440,
			CardIds.VirmenSensei_WON_300,
			CardIds.WarsongWrangler,
			CardIds.WingCommanderIchman_AV_336,
			CardIds.WitchingHour
			));
		}
		if (refCard.races.map(r => r.toUpperCase()).includes('PIRATE')) {
			return and(side(inputSide), or(inDeck, inHand), cardIs(
				CardIds.AdrenalineFiend_VAC_927,
			CardIds.Ancharrr,
			CardIds.BeckoningBicornTavernBrawl,
			CardIds.CannonBarrage,
			CardIds.CaptainsParrotVanilla,
			CardIds.CutlassCourier,
			CardIds.HarborScamp,
			CardIds.HozenRoughhouser_VAC_938,
			CardIds.PatchesThePirate_CFM_637,
			CardIds.PatchesThePirate_LockedAndLoaded_THD_025p,
			CardIds.PirateAdmiralHooktusk,
			CardIds.SailboatCaptain_VAC_937,
			CardIds.ShadyDealer,
			CardIds.SharkPuncher_WON_138,
			CardIds.ShipsCannon,
			CardIds.ShoplifterGoldbeard_TOY_511,
			CardIds.Swordfish,
			CardIds.TreasureDistributor_TOY_518
			));
		}
		if (refCard.races.map(r => r.toUpperCase()).includes('DEMON')) {
			return and(side(inputSide), or(inDeck, inHand), cardIs(
				CardIds.AllShallServeTavernBrawl,
			CardIds.BlackHole_GDB_126,
			CardIds.BloodreaverGuldan_ICC_831,
			CardIds.CariaFelsoul,
			CardIds.CraneGame_TOY_884,
			CardIds.Demonfuse_DarkFusionEnchantment,
			CardIds.Felosophy,
			CardIds.GameMasterNemsy_TOY_524,
			CardIds.InfernalStratagem_GDB_122,
			CardIds.Malganis_GVG_021,
			CardIds.PitCommander,
			CardIds.RagingFelscreamer_BT_416,
			CardIds.SenseDemonsVanilla_VAN_EX1_317,
			CardIds.SigilOfReckoning,
			CardIds.TabletopRoleplayer_TOY_915,
			CardIds.UmpiresGrasp_TOY_641,
			CardIds.VoidcallerCore
			));
		}
		if (refCard.races.map(r => r.toUpperCase()).includes('DRAGON')) {
			return and(side(inputSide), or(inDeck, inHand), cardIs(
				CardIds.AmberWhelp,
			CardIds.BlackwingCorruptor_WON_329,
			CardIds.BreathOfDreams,
			CardIds.BroodKeeper_EDR_457,
			CardIds.CandleBreath,
			CardIds.Chillmaw_CORE_AT_123,
			CardIds.CloudSerpent_TLC_888,
			CardIds.ClutchOfCorruption_EDR_454,
			CardIds.DaringDrake,
			CardIds.Darkrider_EDR_456,
			CardIds.DesertNestmatron_WW_826,
			CardIds.DraconicDreamTavernBrawl,
			CardIds.DragonAffinityTavernBrawl,
			CardIds.DragonBreeder,
			CardIds.DragonConsort,
			CardIds.DragonGolem_WW_822,
			CardIds.DragonbloodTavernBrawl,
			CardIds.DragonboneRitualTavernBrawl,
			CardIds.Dragoncaster,
			CardIds.DrakonidOperativeCore,
			CardIds.FlyOffTheShelves_TOY_714,
			CardIds.FrizzKindleroost,
			CardIds.FutureEmissary_WON_140,
			CardIds.GiftwrappedWhelp_TOY_386,
			CardIds.HeraldOfFlame_TRLA_176,
			CardIds.HornOfWrathion,
			CardIds.Kazakusan_ONY_005,
			CardIds.MalygosAspectOfMagic,
			CardIds.NaralexHeraldOfTheFlights_EDR_844,
			CardIds.NetherBreath_DRG_205,
			CardIds.OnyxianWarder,
			CardIds.PetalPeddler_EDR_889,
			CardIds.RedscaleDragontamer_CORE_DMF_194,
			CardIds.ScaleReplica_TOY_387,
			CardIds.Scalerider,
			CardIds.Scaleworm,
			CardIds.Skyfin,
			CardIds.Soridormi_WON_146,
			CardIds.SpinetailDrake_WW_820,
			CardIds.SplishSplashWhelp_WW_819,
			CardIds.Stormhammer,
			CardIds.SuccumbToMadness_EDR_455,
			CardIds.TakeToTheSkies_WW_816,
			CardIds.TastyFlyfish,
			CardIds.Timewarden,
			CardIds.TimewinderZarimi_TOY_385,
			CardIds.TormentedDreadwing_EDR_572,
			CardIds.TwilightGuardian,
			CardIds.WingCommander
			));
		}
		if (refCard.races.map(r => r.toUpperCase()).includes('ELEMENTAL')) {
			return and(side(inputSide), or(inDeck, inHand), cardIs(
				CardIds.AnimatedAvalanche,
			CardIds.AquaArchivist,
			CardIds.AridStormer,
			CardIds.AzeriteGiant_WW_025,
			CardIds.Blazecaller,
			CardIds.BralmaSearstone_TLC_228,
			CardIds.DangBlastedElemental_WW_397,
			CardIds.ElementalEvocation,
			CardIds.ElementaryReaction,
			CardIds.ErodedSediment_WW_428,
			CardIds.FireBreath_DINO_406,
			CardIds.FirePlumeHarbinger,
			CardIds.FlameRevenant,
			CardIds.FrostLichJaina_CORE_ICC_833,
			CardIds.FrostfinChomper,
			CardIds.GraniteForgeborn,
			CardIds.Gyreworm,
			CardIds.KalimosPrimalLord_Core_UNG_211,
			CardIds.KindlingElemental,
			CardIds.Lamplighter_VAC_442,
			CardIds.LilypadLurker,
			CardIds.LivingPrairie_WW_024,
			CardIds.MesaduneTheFractured_WW_429,
			CardIds.MinecartCruiser_WW_326,
			CardIds.OverflowSurger_WW_424,
			CardIds.Sandbinder,
			CardIds.ShaleSpider_DEEP_034,
			CardIds.SkarrTheCatastrophe_WW_026,
			CardIds.SolarFlare_GDB_305,
			CardIds.SpontaneousCombustion_GDB_456,
			CardIds.SteamSurger,
			CardIds.StoneSentinel,
			CardIds.TaintedRemnant_YOG_519,
			CardIds.Therazane_DEEP_036,
			CardIds.UnchainedGladiator,
			CardIds.WailingVapor_CORE_WC_042,
			CardIds.WindsweptPageturner_TLC_220
			));
		}
		if (refCard.races.map(r => r.toUpperCase()).includes('MURLOC')) {
			return and(side(inputSide), or(inDeck, inHand), cardIs(
				CardIds.AzsharanScavenger_SunkenScavengerToken,
			CardIds.Braingill_GDB_878,
			CardIds.CookiesLadleTavernBrawl,
			CardIds.DiveTheGolakkaDepths_TLC_426,
			CardIds.FinjaTheFlyingStar_CORE_CFM_344,
			CardIds.FiremancerFlurgl,
			CardIds.GorlocRavager,
			CardIds.HotSpringGlider_TLC_428,
			CardIds.IceFishing_ICC_089,
			CardIds.ItsRainingFin,
			CardIds.LushwaterScout,
			CardIds.SirFinleyMrrgglton_ScalesOfJustice_THD_044p,
			CardIds.TidelostBurrower,
			CardIds.TinyfinsCaravan,
			CardIds.UnderbellyAngler
			));
		}
		if (refCard.races.map(r => r.toUpperCase()).includes('NAGA')) {
			return and(side(inputSide), or(inDeck, inHand), cardIs(
				CardIds.BarbedNets,
			CardIds.CoilCastingTavernBrawl,
			CardIds.NagasPride,
			CardIds.OasisOutlaws_WW_404,
			CardIds.Predation,
			CardIds.SeaweedStrike,
			CardIds.SerpentWig_TSC_215
			));
		}
		if (refCard.races.map(r => r.toUpperCase()).includes('MECH')) {
			return and(side(inputSide), or(inDeck, inHand), cardIs(
				CardIds.Bubblebot_TSC_059,
			CardIds.ClickClocker,
			CardIds.ClockworkKnight,
			CardIds.DrBoomMadGenius,
			CardIds.DrBoom_BoomBarrage_THD_034p,
			CardIds.DynOMaticCore,
			CardIds.FrequencyOscillator,
			CardIds.GaiaTheTechtonic_TSC_029,
			CardIds.GoboglideTech,
			CardIds.IniStormcoil_TSC_649,
			CardIds.InventorsAura,
			CardIds.KangorsEndlessArmy,
			CardIds.MechaShark_TSC_054,
			CardIds.MimironTheMastermind,
			CardIds.PitStop,
			CardIds.RadarDetector_TSC_079,
			CardIds.SeafloorGateway_TSC_055,
			CardIds.SeascoutOperator_TSC_646,
			CardIds.SecurityAutomaton_TSC_928,
			CardIds.SootSpewer_WON_033,
			CardIds.TimelineAccelerator_WON_139,
			CardIds.TinyWorldbreaker_YOG_527,
			CardIds.TramOperator,
			CardIds.TrenchSurveyor_TSC_642,
			CardIds.Ursatron,
			CardIds.WreckemAndDeckem_TOY_603
			));
		}
		if (refCard.races.map(r => r.toUpperCase()).includes('TOTEM')) {
			return and(side(inputSide), or(inDeck, inHand), cardIs(
				CardIds.DraeneiTotemcarver_CORE_AT_047,
			CardIds.Gigantotem,
			CardIds.SplittingAxe,
			CardIds.TheStonewright,
			CardIds.ThingFromBelowCore
			));
		}
	}

	// Spell school reverse synergies
	if (refCard.spellSchool && refCard.type?.toUpperCase() === 'SPELL') {
	}

	// Card type reverse synergies
	if (refCard.type?.toUpperCase() === 'LOCATION') {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.DispossessedSoul_CORE_REV_901
		));
	}

	// Complex condition reverse synergies
	// tribe:beast+type:minion (3 cards)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.races?.map(r => r.toUpperCase()).includes('BEAST')) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.AbsorbentParasite,
			CardIds.Banjosaur,
			CardIds.TheCurator_CORE_KAR_061
		));
	}

	// type:minion+mechanics:rush (9 cards)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.mechanics?.includes('RUSH')) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.AkaliTheRhino,
			CardIds.ClearTheWay,
			CardIds.DivingGryphon,
			CardIds.PotionOfSparkingTavernBrawl,
			CardIds.RocketBackpacksTavernBrawl,
			CardIds.RushTheStage,
			CardIds.SpecialDeliveryTavernBrawl,
			CardIds.StageDive_StageDive,
			CardIds.TownCrier_CORE_GIL_580
		));
	}

	// mechanics:battlecry+cost:more:2 (1 card)
	if (refCard.cost > 2 && refCard.mechanics?.includes('BATTLECRY')) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.AllTogetherNowTavernBrawl
		));
	}

	// type:minion+other:tribeless (11 cards)
	if (refCard.type?.toUpperCase() === 'MINION' && !refCard.races || refCard.races.length === 0) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.AllYouCanEat_VAC_528,
			CardIds.AmalgamOfTheDeep,
			CardIds.FlightOfTheFirehawk_TLC_222,
			CardIds.MenagerieMug_CORE_WON_141,
			CardIds.PartyAnimal,
			CardIds.RoaringApplause,
			CardIds.RockMasterVoone_ETC_121,
			CardIds.SpiritOfTheMountain_TLC_229,
			CardIds.ThePurator,
			CardIds.TortollanStoryteller_TLC_254,
			CardIds.TrustyCompanion_WW_027
		));
	}

	// tribe:undead+type:minion (2 cards)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.races?.map(r => r.toUpperCase()).includes('UNDEAD')) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.AmorphousSlime,
			CardIds.SinisterSoulcage_YOG_513
		));
	}

	// type:minion+mechanics:deathrattle (35 cards)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.mechanics?.includes('DEATHRATTLE')) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.AmuletOfUndying,
			CardIds.ArchdruidOfThorns_EDR_491,
			CardIds.AwakenTheMakers,
			CardIds.BrittleboneBuccaneer_VAC_436,
			CardIds.CarrionStudies,
			CardIds.DeadRinger,
			CardIds.DeathBlossomWhomper,
			CardIds.DeathGrowl,
			CardIds.DeathlyDeathTavernBrawl,
			CardIds.DeathstriderTavernBrawl,
			CardIds.DevoutBlessingsTavernBrawlToken,
			CardIds.ExpeditedBurialTavernBrawl,
			CardIds.FelfireBonfire_VAC_952,
			CardIds.ForsakenLieutenant_AV_601,
			CardIds.HedgeMaze_REV_792,
			CardIds.HighCultistHerenn_TLC_810,
			CardIds.JewelOfNzoth,
			CardIds.MummyMagic,
			CardIds.NecriumApothecary,
			CardIds.NineLives,
			CardIds.NzothTheCorruptor,
			CardIds.NzothTheCorruptor_DarkMachinations_THD_039p,
			CardIds.PrincessTavernBrawl,
			CardIds.RavenousFelhunter_EDR_891,
			CardIds.ScourgeIllusionist,
			CardIds.Shattershambler,
			CardIds.TamsinsPhylactery,
			CardIds.TerrorscaleStalker_CORE_UNG_800,
			CardIds.TombLurker_ICC_098,
			CardIds.Tuskpiercer_CORE_BAR_330,
			CardIds.TwilightsCall,
			CardIds.UnearthedRaptor,
			CardIds.VengefulSpirit_BAR_328,
			CardIds.XyrellaTheDevout,
			CardIds.YellingYodeler
		));
	}

	// mechanics:secret (17 cards)
	if (refCard.mechanics?.includes('SECRET')) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.AncientMysteries,
			CardIds.AnonymousInformant_CORE_REV_841,
			CardIds.Arcanologist,
			CardIds.ArcanologistCore,
			CardIds.ChattyBartender,
			CardIds.CostumedSinger,
			CardIds.DunBaldarBunker,
			CardIds.EaglehornBowVanilla,
			CardIds.GhastlyGravedigger,
			CardIds.KabalCrystalRunner_WON_308,
			CardIds.MadScientist,
			CardIds.MysteriousChallenger_WON_334,
			CardIds.PrivateEye,
			CardIds.ScuttlebuttGhoul_CORE_REV_900,
			CardIds.SecretStudiesTavernBrawl,
			CardIds.SpringTheTrap,
			CardIds.Zuljin_WarriorsOfAmani_THD_010p
		));
	}

	// type:minion+cost:less:4 (1 card)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.cost < 4) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.AnimateDead
		));
	}

	// type:minion+cost:equal:1 (5 cards)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.cost === 1) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.ApothecarysCaravan,
			CardIds.BoogieDown,
			CardIds.K90tron,
			CardIds.SonyaWaterdancer_TOY_515,
			CardIds.TrustyFishingRod_VAC_960
		));
	}

	// type:spell+cost:equal:7 (1 card)
	if (refCard.type?.toUpperCase() === 'SPELL' && refCard.cost === 7) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.ArcaneBrilliance
		));
	}

	// tribe:demon+other:notInInitialDeck (2 cards)
	if (refCard.races?.map(r => r.toUpperCase()).includes('DEMON')) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.Archimonde_GDB_128,
			CardIds.ForebodingFlame_GDB_121
		));
	}

	// type:spell+cost:more:4 (3 cards)
	if (refCard.type?.toUpperCase() === 'SPELL' && refCard.cost > 4) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.AshleafPixie_FIR_961,
			CardIds.Groundskeeper,
			CardIds.HagathaTheFabled_TOY_504
		));
	}

	// type:minion+mechanics:battlecry (7 cards)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.mechanics?.includes('BATTLECRY')) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.AuctionhouseGavel,
			CardIds.BrannBronzebeard_BrannsSaddle_THD_042p,
			CardIds.FairyTaleForest_TOY_507,
			CardIds.Murmur_GDB_448,
			CardIds.ParrotSanctuary_VAC_409,
			CardIds.Snapdragon,
			CardIds.Turbulus_WORK_013
		));
	}

	// type:minion+cost:less:3 (3 cards)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.cost < 3) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.BandOfBeesTavernBrawl,
			CardIds.CallToArms,
			CardIds.OracleOfElune
		));
	}

	// type:spell+cost:equal:1 (3 cards)
	if (refCard.type?.toUpperCase() === 'SPELL' && refCard.cost === 1) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.BarakKodobane_CORE_BAR_551,
			CardIds.Gazlowe,
			CardIds.TrinketTracker
		));
	}

	// mechanics:deathrattle (12 cards)
	if (refCard.mechanics?.includes('DEATHRATTLE')) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.BaronRivendare_CORE_FP1_031,
			CardIds.BarrensTrapper,
			CardIds.NecriumBlade,
			CardIds.NecriumVial,
			CardIds.PlayDead_CORE_ICC_052,
			CardIds.ReturnPolicy_MIS_102,
			CardIds.RollTheBones_CORE_ICC_201,
			CardIds.RottenRodent,
			CardIds.ShallowGrave,
			CardIds.Smokescreen,
			CardIds.SummonerDarkmarrow_VAC_503,
			CardIds.TotemOfTheDead_LOOTA_845
		));
	}

	// type:minion+mechanics:taunt (12 cards)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.mechanics?.includes('TAUNT')) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.Battlepickaxe_WW_347,
			CardIds.Bolster,
			CardIds.BulkUp,
			CardIds.DetonationJuggernaut_WW_329,
			CardIds.EnduranceTrainingTavernBrawl,
			CardIds.FirePlumesHeart,
			CardIds.IntoTheFray,
			CardIds.QualityAssurance_TOY_605,
			CardIds.RazormaneBattleguard,
			CardIds.TortollanTraveler_VAC_518,
			CardIds.UnluckyPowderman_WW_367,
			CardIds.ValstannStaghelm_WON_345
		));
	}

	// mechanics:battlecry (7 cards)
	if (refCard.mechanics?.includes('BATTLECRY')) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.BattleTotem_LOOTA_846,
			CardIds.BrannBronzebeard_LOE_077,
			CardIds.BrilliantMacaw,
			CardIds.CorruptTheWaters,
			CardIds.MurmuringElemental,
			CardIds.RallyTheTroopsTavernBrawl,
			CardIds.Shudderblock_ShudderblockToken_TOY_501t
		));
	}

	// mechanics:legendary+other:legendary (1 card)
	if (refCard.rarity?.toUpperCase() === 'LEGENDARY') {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.ArchVillainRafaam_BeholdMyStuff_THD_032p
		));
	}

	// school:frost+other:dealsDamage (1 card)
	if (refCard.spellSchool?.toUpperCase() === 'FROST' && refCard.type?.toUpperCase() === 'SPELL') {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.BitterColdTavernBrawl
		));
	}

	// tribe:mech+mechanics:deathrattle (1 card)
	if (refCard.races?.map(r => r.toUpperCase()).includes('MECH') && refCard.mechanics?.includes('DEATHRATTLE')) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.BoomWrench_BoomWrenchToken_TOY_604t
		));
	}

	// mechanics:excavate,legendary,quickdraw,tradeable+other:legendary (1 card)
	if (refCard.rarity?.toUpperCase() === 'LEGENDARY') {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.BountyBoard_WW_003
		));
	}

	// mechanics:lifesteal+other:restoreHealth (1 card)
	if (refCard.mechanics?.includes('LIFESTEAL')) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.BrittleboneDestroyer
		));
	}

	// type:spell+cost:costMore:4 (3 cards)
	if (refCard.type?.toUpperCase() === 'SPELL') {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.BumblingBellhop_VAC_521,
			CardIds.FaeTrickster_EDR_571,
			CardIds.WeaverOfTheCycle_EDR_472
		));
	}

	// type:minion+attack:equal:1 (1 card)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.attack === 1) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.BusyBot_WORK_002
		));
	}

	// type:minion+cost:more:4 (1 card)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.cost > 4) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.CaricatureArtist_TOY_391
		));
	}

	// school:holy+type:spell (15 cards)
	if (refCard.type?.toUpperCase() === 'SPELL' && refCard.spellSchool?.toUpperCase() === 'HOLY') {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.CarielRoame_BAR_902,
			CardIds.FlickeringLightbot_FlickeringLightbotToken_MIS_918t,
			CardIds.GuardianLightTavernBrawl,
			CardIds.HeraldOfLight,
			CardIds.HiHoSilverwing_WW_344,
			CardIds.HolyCowboy_WW_335,
			CardIds.HolyGlowsticks_MIS_709,
			CardIds.InvigoratingLightTavernBrawl,
			CardIds.KnightOfAnointment,
			CardIds.KureTheLightBeyond_GDB_442,
			CardIds.ReachEquilibrium_CleanseTheShadowToken_TLC_817t,
			CardIds.ShimmeringSunfish,
			CardIds.StarlightGroove,
			CardIds.TheGardensGrace,
			CardIds.VeteranWarmedic
		));
	}

	// type:minion+attack:greater:4 (2 cards)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.attack > 4) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.ClimbingHook_VAC_932,
			CardIds.GiantAnaconda
		));
	}

	// tribe:dragon+type:minion (2 cards)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.races?.map(r => r.toUpperCase()).includes('DRAGON')) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.CollectorsIreTavernBrawlToken,
			CardIds.DrocomurchanicasTavernBrawlToken
		));
	}

	// tribe:naga+type:spell (1 card)
	if (refCard.type?.toUpperCase() === 'SPELL' && refCard.races?.map(r => r.toUpperCase()).includes('NAGA')) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.ConchsCall
		));
	}

	// type:minion+attack:greater:0,less:2 (1 card)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.attack > 0 && refCard.attack < 2) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.Crystology
		));
	}

	// type:minion+mechanics:deathrattle+cost:less:6 (1 card)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.cost < 6 && refCard.mechanics?.includes('DEATHRATTLE')) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.DeathSpeakerBlackthorn_BAR_329
		));
	}

	// school:nature+type:spell (11 cards)
	if (refCard.type?.toUpperCase() === 'SPELL' && refCard.spellSchool?.toUpperCase() === 'NATURE') {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.DeviateDreadfang,
			CardIds.GroveShaper_EDR_271,
			CardIds.GuffRunetotem_BAR_720,
			CardIds.HeraldOfNature,
			CardIds.IronRootsTavernBrawl,
			CardIds.LadyAnacondra_WC_006,
			CardIds.MendingPoolsTavernBrawl,
			CardIds.SpreadingSaplingsTavernBrawl,
			CardIds.ToadOfTheWilds,
			CardIds.TopiorTheShrubbagazzor,
			CardIds.WidowbloomSeedsman
		));
	}

	// tribe:demon+type:minion (2 cards)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.races?.map(r => r.toUpperCase()).includes('DEMON')) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.DirgeOfDespair,
			CardIds.KanrethadEbonlocke_KanrethadPrimeToken
		));
	}

	// type:minion+mechanics:legendary+other:legendary (4 cards)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.rarity?.toUpperCase() === 'LEGENDARY') {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.DisksOfLegendTavernBrawl,
			CardIds.InspiringPresenceTavernBrawl,
			CardIds.RingOfPhaseshiftingTavernBrawl,
			CardIds.RoyalGreatswordTavernBrawlToken
		));
	}

	// type:minion+mechanics:deathrattle+cost:less:4 (2 cards)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.cost < 4 && refCard.mechanics?.includes('DEATHRATTLE')) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.DreadRaptor_TLC_432,
			CardIds.Razorboar
		));
	}

	// school:shadow+type:spell (10 cards)
	if (refCard.type?.toUpperCase() === 'SPELL' && refCard.spellSchool?.toUpperCase() === 'SHADOW') {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.EerieStoneTavernBrawl,
			CardIds.HeraldOfShadows,
			CardIds.KaraTheDarkStar_GDB_127,
			CardIds.LadyDarkvein_CORE_REV_373,
			CardIds.ReachEquilibrium_CorruptTheLightToken_TLC_817t2,
			CardIds.Shadowborn,
			CardIds.ShadowclothNeedle,
			CardIds.SketchArtist_TOY_916,
			CardIds.StaffOfPainTavernBrawl,
			CardIds.TwilightDeceptor
		));
	}

	// tribe:elemental+mechanics:legendary+other:legendary (1 card)
	if (refCard.races?.map(r => r.toUpperCase()).includes('ELEMENTAL') && refCard.rarity?.toUpperCase() === 'LEGENDARY') {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.AlakirTheWindlord_ElementalEvocation_THD_026p
		));
	}

	// type:minion+mechanics:divineShield (3 cards)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.mechanics?.includes('DIVINE_SHIELD')) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.FancyPackaging_TOY_881,
			CardIds.Funkfin,
			CardIds.RighteousReservesTavernBrawl
		));
	}

	// school:fel+type:spell (10 cards)
	if (refCard.type?.toUpperCase() === 'SPELL' && refCard.spellSchool?.toUpperCase() === 'FEL') {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.FelfireBlaze_FIR_904,
			CardIds.Felgorger_SW_043,
			CardIds.FossilFanatic,
			CardIds.GraveDefiler,
			CardIds.HeraldOfChaos,
			CardIds.IllidanStormrage_FelInside_THD_004p,
			CardIds.ImpCredibleTrousersTavernBrawl,
			CardIds.PopgarThePutrid_WW_091,
			CardIds.Scorchreaver_FIR_952,
			CardIds.WitherTheWeakTavernBrawl
		));
	}

	// type:minion+mechanics:deathrattle+cost:more:4 (1 card)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.cost > 4 && refCard.mechanics?.includes('DEATHRATTLE')) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.FerociousFelbat_EDR_892
		));
	}

	// mechanics:battlecry,combo (1 card)
	if (refCard.mechanics?.includes('BATTLECRY')) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.FieldContact
		));
	}

	// school:fire+type:spell (11 cards)
	if (refCard.type?.toUpperCase() === 'SPELL' && refCard.spellSchool?.toUpperCase() === 'FIRE') {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.FirekeepersIdolTavernBrawl,
			CardIds.FlameWavesTavernBrawl,
			CardIds.FlamesOfTheKirinTorTavernBrawl,
			CardIds.HotStreak,
			CardIds.InfernoHerald_FIR_913,
			CardIds.LivingFlame_FIR_929,
			CardIds.MechanizedMagma_TLC_224,
			CardIds.ScorchingWinds_FIR_910,
			CardIds.SunfuryChampion,
			CardIds.Thoribelore,
			CardIds.VolcanicThrasher_TLC_223
		));
	}

	// cost:more:7 (1 card)
	if (refCard.cost > 7) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.FlamesOfTheFirelord_FIR_923
		));
	}

	// school:frost+type:spell (8 cards)
	if (refCard.type?.toUpperCase() === 'SPELL' && refCard.spellSchool?.toUpperCase() === 'FROST') {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.GlacialDownpourTavernBrawl,
			CardIds.HarbingerOfWinterCore_RLK_511,
			CardIds.HeraldOfLokholar,
			CardIds.IceRevenant,
			CardIds.LadyDeathwhisper_RLK_713,
			CardIds.RambunctiousStuffy_TOY_821,
			CardIds.Rimetongue,
			CardIds.WatercolorArtist_TOY_376
		));
	}

	// tribe:mech+type:minion (1 card)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.races?.map(r => r.toUpperCase()).includes('MECH')) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.GorillabotA3Core
		));
	}

	// cost:equal:2 (1 card)
	if (refCard.cost === 2) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.GreedyPartner_WW_901
		));
	}

	// type:spell+cost:more:5 (1 card)
	if (refCard.type?.toUpperCase() === 'SPELL' && refCard.cost > 5) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.GreySageParrot
		));
	}

	// type:minion+cost:less:5 (2 cards)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.cost < 5) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.GrizzledGuardian,
			CardIds.OakenSummons_CORE_LOOT_309
		));
	}

	// tribe:beast+cost:less:6 (2 cards)
	if (refCard.races?.map(r => r.toUpperCase()).includes('BEAST') && refCard.cost < 6) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.GuardianAnimals,
			CardIds.PetCollector
		));
	}

	// school:arcane+type:spell (7 cards)
	if (refCard.type?.toUpperCase() === 'SPELL' && refCard.spellSchool?.toUpperCase() === 'ARCANE') {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.HalduronBrightwing,
			CardIds.MagistersApprentice,
			CardIds.SilvermoonFarstrider_RLK_826,
			CardIds.Stargazing_WW_425,
			CardIds.StarlightReactor_GDB_108,
			CardIds.UnstableMagicTavernBrawl,
			CardIds.Vexallus
		));
	}

	// type:minion+attack:less:3 (1 card)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.attack < 3) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.HatcheryHelper_TLC_233
		));
	}

	// cost:more:3 (1 card)
	if (refCard.cost > 3) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.HemetJungleHunter
		));
	}

	// mechanics:taunt (3 cards)
	if (refCard.mechanics?.includes('TAUNT')) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.HoldTheLineTavernBrawl,
			CardIds.LastStand,
			CardIds.StolenGoods_WON_110
		));
	}

	// type:minion+attack:equal:0 (1 card)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.attack === 0) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.HolyEggbearer_DINO_411
		));
	}

	// type:minion+cost:less:5,more:0 (1 card)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.cost > 0 && refCard.cost < 5) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.Hybridization_TLC_236
		));
	}

	// type:spell+other:hasSpellSchool (2 cards)
	if (refCard.type?.toUpperCase() === 'SPELL' && !!refCard.spellSchool) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.MagisterDawngrasp_AV_200,
			CardIds.RazzleDazzler_VAC_301
		));
	}

	// type:spell+mechanics:chooseOne (1 card)
	if (refCard.type?.toUpperCase() === 'SPELL') {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.JerryRigCarpenter
		));
	}

	// mechanics:divineShield (2 cards)
	if (refCard.mechanics?.includes('DIVINE_SHIELD')) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.Jitterbug,
			CardIds.TorethTheUnbreaking_EDR_258
		));
	}

	// type:minion+cost:equal:7 (1 card)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.cost === 7) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.JuicyPsychmelon
		));
	}

	// school:fire+type:spell+other:dealsDamage (1 card)
	if (refCard.type?.toUpperCase() === 'SPELL' && refCard.spellSchool?.toUpperCase() === 'FIRE') {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.KindlingFlameTavernBrawl
		));
	}

	// type:minion+attack:less:4 (2 cards)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.attack < 4) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.LeadDancer,
			CardIds.WarsongCommanderVanilla
		));
	}

	// cost:equal:3 (1 card)
	if (refCard.cost === 3) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.LinedancePartner_WW_433
		));
	}

	// type:minion+mechanics:combo (1 card)
	if (refCard.type?.toUpperCase() === 'MINION') {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.LuckyComet_GDB_873
		));
	}

	// type:minion+cost:costMore:7 (1 card)
	if (refCard.type?.toUpperCase() === 'MINION') {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.Merithra_EDR_238
		));
	}

	// type:minion+other:neutral (2 cards)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.classes?.includes('NEUTRAL')) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.MeekMasteryTavernBrawl,
			CardIds.MulchMadnessTavernBrawl
		));
	}

	// school:nature+type:spell+other:dealsDamage (1 card)
	if (refCard.type?.toUpperCase() === 'SPELL' && refCard.spellSchool?.toUpperCase() === 'NATURE') {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.NaturalForceTavernBrawl
		));
	}

	// tribe:mech+mechanics:magnetic (1 card)
	if (refCard.races?.map(r => r.toUpperCase()).includes('MECH')) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.OptimizedPolarityTavernBrawl
		));
	}

	// type:spell+mechanics:discover+cost:more:2 (1 card)
	if (refCard.type?.toUpperCase() === 'SPELL' && refCard.cost > 2) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.OrbOfRevelationTavernBrawl
		));
	}

	// cost:equal:1 (4 cards)
	if (refCard.cost === 1) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.PipThePotent_WW_394,
			CardIds.PrinceLiam,
			CardIds.RollingStone,
			CardIds.ThirstyDrifter_WW_387
		));
	}

	// type:spell+cost:more:1 (1 card)
	if (refCard.type?.toUpperCase() === 'SPELL' && refCard.cost > 1) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.PlaguebringerTavernBrawl
		));
	}

	// mechanics:rush (1 card)
	if (refCard.mechanics?.includes('RUSH')) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.PluckyPaintfin_TOY_517
		));
	}

	// type:minion+cost:less:4,more:0 (1 card)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.cost > 0 && refCard.cost < 4) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.Rally
		));
	}

	// type:minion+mechanics:deathrattle+cost:less:5 (1 card)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.cost < 5 && refCard.mechanics?.includes('DEATHRATTLE')) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.RazorfenBeastmaster
		));
	}

	// type:minion+cost:costMore:6 (1 card)
	if (refCard.type?.toUpperCase() === 'MINION') {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.RotheartDryad_EDR_485
		));
	}

	// cost:equal:4 (1 card)
	if (refCard.cost === 4) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.RowdyPartner_WW_906
		));
	}

	// type:minion+health:less:2 (2 cards)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.health < 2) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.SalhetsPride,
			CardIds.StewardOfDarkshire_WON_310
		));
	}

	// type:minion+cost:more:5 (1 card)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.cost > 5) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.ScepterOfSummoning
		));
	}

	// type:minion+cost:equal:8 (1 card)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.cost === 8) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.SilverVanguard
		));
	}

	// mechanics:deathrattle+cost:less:5 (1 card)
	if (refCard.cost < 5 && refCard.mechanics?.includes('DEATHRATTLE')) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.SketchyInformation
		));
	}

	// type:spell+cost:baseEqual:1 (1 card)
	if (refCard.type?.toUpperCase() === 'SPELL' && refCard.cost === 1) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.SkulkingGeist_ICC_701
		));
	}

	// type:spell+mechanics:secret (3 cards)
	if (refCard.type?.toUpperCase() === 'SPELL' && refCard.mechanics?.includes('SECRET')) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.SecretkeeperLegacy,
			CardIds.SrTombDiverTavernBrawl,
			CardIds.SwordOfTheFallen
		));
	}

	// type:spell+cost:less:4 (1 card)
	if (refCard.type?.toUpperCase() === 'SPELL' && refCard.cost < 4) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.StonehearthVindicator
		));
	}

	// cost:more:5 (1 card)
	if (refCard.cost > 5) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.SummerFlowerchild
		));
	}

	// type:spell+cost:less:3 (2 cards)
	if (refCard.type?.toUpperCase() === 'SPELL' && refCard.cost < 3) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.SunsapperLynessa_VAC_507,
			CardIds.VioletTreasuregill_TLC_438
		));
	}

	// cost:more:1+other:notInInitialDeck (1 card)
	if (refCard.cost > 1) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.TaethelanBloodwatcher_WW_430
		));
	}

	// school:shadow+type:spell+cost:more:0 (1 card)
	if (refCard.type?.toUpperCase() === 'SPELL' && refCard.spellSchool?.toUpperCase() === 'SHADOW' && refCard.cost > 0) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.TamsinRoame_BAR_918
		));
	}

	// cost:more:4 (1 card)
	if (refCard.cost > 4) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.TimberTambourine
		));
	}

	// tribe:totem+type:minion (1 card)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.races?.map(r => r.toUpperCase()).includes('TOTEM')) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.TotemicSurge
		));
	}

	// tribe:beast+cost:less:4 (1 card)
	if (refCard.races?.map(r => r.toUpperCase()).includes('BEAST') && refCard.cost < 4) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.TrialOfTheJormungars_WON_028
		));
	}

	// type:minion+health:biggerThanAttack (1 card)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.health > refCard.attack) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.UnlockedPotential
		));
	}

	// type:minion+cost:less:4+other:neutral (1 card)
	if (refCard.type?.toUpperCase() === 'MINION' && refCard.cost < 4 && refCard.classes?.includes('NEUTRAL')) {
		return and(side(inputSide), or(inDeck, inHand), cardIs(
			CardIds.WarCommandsTavernBrawl
		));
	}

	return null;
};

/**
 * Reverse mapping summary:
 * Races:
 *   undead: 28 cards want this
 *   beast: 51 cards want this
 *   pirate: 18 cards want this
 *   demon: 17 cards want this
 *   dragon: 49 cards want this
 *   elemental: 37 cards want this
 *   murloc: 15 cards want this
 *   naga: 7 cards want this
 *   mech: 26 cards want this
 *   totem: 5 cards want this
 * Spell Schools:
 * Card Types:
 *   location: 1 cards want this
 * Mechanics:
 * Complex Conditions:
 *   tribe:beast+type:minion: 3 cards want this
 *   type:minion+mechanics:rush: 9 cards want this
 *   mechanics:battlecry+cost:more:2: 1 cards want this
 *   type:minion+other:tribeless: 11 cards want this
 *   tribe:undead+type:minion: 2 cards want this
 *   type:minion+mechanics:deathrattle: 35 cards want this
 *   mechanics:secret: 17 cards want this
 *   type:minion+cost:less:4: 1 cards want this
 *   type:minion+cost:equal:1: 5 cards want this
 *   type:spell+cost:equal:7: 1 cards want this
 *   tribe:demon+other:notInInitialDeck: 2 cards want this
 *   type:spell+cost:more:4: 3 cards want this
 *   type:minion+mechanics:battlecry: 7 cards want this
 *   type:minion+cost:less:3: 3 cards want this
 *   type:spell+cost:equal:1: 3 cards want this
 *   mechanics:deathrattle: 12 cards want this
 *   type:minion+mechanics:taunt: 12 cards want this
 *   mechanics:battlecry: 7 cards want this
 *   mechanics:legendary+other:legendary: 1 cards want this
 *   school:frost+other:dealsDamage: 1 cards want this
 *   tribe:mech+mechanics:deathrattle: 1 cards want this
 *   mechanics:excavate,legendary,quickdraw,tradeable+other:legendary: 1 cards want this
 *   mechanics:lifesteal+other:restoreHealth: 1 cards want this
 *   type:spell+cost:costMore:4: 3 cards want this
 *   type:minion+attack:equal:1: 1 cards want this
 *   type:minion+cost:more:4: 1 cards want this
 *   school:holy+type:spell: 15 cards want this
 *   type:minion+attack:greater:4: 2 cards want this
 *   tribe:dragon+type:minion: 2 cards want this
 *   tribe:naga+type:spell: 1 cards want this
 *   type:minion+attack:greater:0,less:2: 1 cards want this
 *   type:minion+mechanics:deathrattle+cost:less:6: 1 cards want this
 *   school:nature+type:spell: 11 cards want this
 *   tribe:demon+type:minion: 2 cards want this
 *   type:minion+mechanics:legendary+other:legendary: 4 cards want this
 *   type:minion+mechanics:deathrattle+cost:less:4: 2 cards want this
 *   school:shadow+type:spell: 10 cards want this
 *   tribe:elemental+mechanics:legendary+other:legendary: 1 cards want this
 *   type:minion+mechanics:divineShield: 3 cards want this
 *   school:fel+type:spell: 10 cards want this
 *   type:minion+mechanics:deathrattle+cost:more:4: 1 cards want this
 *   mechanics:battlecry,combo: 1 cards want this
 *   school:fire+type:spell: 11 cards want this
 *   cost:more:7: 1 cards want this
 *   school:frost+type:spell: 8 cards want this
 *   tribe:mech+type:minion: 1 cards want this
 *   cost:equal:2: 1 cards want this
 *   type:spell+cost:more:5: 1 cards want this
 *   type:minion+cost:less:5: 2 cards want this
 *   tribe:beast+cost:less:6: 2 cards want this
 *   school:arcane+type:spell: 7 cards want this
 *   type:minion+attack:less:3: 1 cards want this
 *   cost:more:3: 1 cards want this
 *   mechanics:taunt: 3 cards want this
 *   type:minion+attack:equal:0: 1 cards want this
 *   type:minion+cost:less:5,more:0: 1 cards want this
 *   type:spell+other:hasSpellSchool: 2 cards want this
 *   type:spell+mechanics:chooseOne: 1 cards want this
 *   mechanics:divineShield: 2 cards want this
 *   type:minion+cost:equal:7: 1 cards want this
 *   school:fire+type:spell+other:dealsDamage: 1 cards want this
 *   type:minion+attack:less:4: 2 cards want this
 *   cost:equal:3: 1 cards want this
 *   type:minion+mechanics:combo: 1 cards want this
 *   type:minion+cost:costMore:7: 1 cards want this
 *   type:minion+other:neutral: 2 cards want this
 *   school:nature+type:spell+other:dealsDamage: 1 cards want this
 *   tribe:mech+mechanics:magnetic: 1 cards want this
 *   type:spell+mechanics:discover+cost:more:2: 1 cards want this
 *   cost:equal:1: 4 cards want this
 *   type:spell+cost:more:1: 1 cards want this
 *   mechanics:rush: 1 cards want this
 *   type:minion+cost:less:4,more:0: 1 cards want this
 *   type:minion+mechanics:deathrattle+cost:less:5: 1 cards want this
 *   type:minion+cost:costMore:6: 1 cards want this
 *   cost:equal:4: 1 cards want this
 *   type:minion+health:less:2: 2 cards want this
 *   type:minion+cost:more:5: 1 cards want this
 *   type:minion+cost:equal:8: 1 cards want this
 *   mechanics:deathrattle+cost:less:5: 1 cards want this
 *   type:spell+cost:baseEqual:1: 1 cards want this
 *   type:spell+mechanics:secret: 3 cards want this
 *   type:spell+cost:less:4: 1 cards want this
 *   cost:more:5: 1 cards want this
 *   type:spell+cost:less:3: 2 cards want this
 *   cost:more:1+other:notInInitialDeck: 1 cards want this
 *   school:shadow+type:spell+cost:more:0: 1 cards want this
 *   cost:more:4: 1 cards want this
 *   tribe:totem+type:minion: 1 cards want this
 *   tribe:beast+cost:less:4: 1 cards want this
 *   type:minion+health:biggerThanAttack: 1 cards want this
 *   type:minion+cost:less:4+other:neutral: 1 cards want this
 */